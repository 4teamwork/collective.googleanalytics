from plone.memoize.instance import memoize
from collective.googleanalytics.utils import getJSValue
from string import Template
import datetime
import time
import os

class AnalyticsReportVisualization(object):
    """
    The visualization for an Analytics report. This object is generated by the
    visualization method of the AnalyticsReportRenderer object. It encapsulates
    all of the logic for turning the report results in to javascript
    configuration for Google Visualizations.
    """

    def __init__(self, report, columns, rows, options):
        self.report = report
        self.columns = columns
        self.rows = rows
        self.options = options
            
    @memoize
    def __call__(self):
        """
        Returns the markup and javascript to create the visualization.
        """

        template_file = os.path.join(os.path.dirname(__file__), 'visualization.tpl')
        template = Template(open(template_file).read())

        template_vars = {
            'package_name': self.report.viz_type.lower(), 
            'columns': self._getColumns(), 
            'data': self._getData(), 
            'chart_type': self.report.viz_type, 
            'id': self.id(),
            'options': self._getOptions()
        }

        return template.substitute(template_vars)
            
    @memoize
    def id(self):
        """
        Creates a unique ID that we can use for the div that will hold the
        visualization.
        """
        try:
            import hashlib
            viz_id = hashlib.md5(self.report.id + str(time.time())).hexdigest()
        except ImportError:
            import md5
            viz_id = md5.new(self.report.id + str(time.time())).hexdigest()

        return 'analytics-' + viz_id

    @memoize
    def _getData(self):
        """
        Returns a javascript array that describes the data. It is used by Google
        Visualizations to populate the DataTable.
        """
        js_rows = []
        for row in self.rows:
            js_row = []
            for value in row:
                js_row.append(getJSValue(value))
            js_rows.append('[%s]' % (', '.join(js_row)))
        return '[\n%s\n]' % (',\n'.join(js_rows))

    @memoize
    def _getColumns(self):
        """
        Returns javascript that adds the appropriate columns to the DataTable.
        """
        
        column_types = []
        if self.rows:
            for value in self.rows[0]:
                if isinstance(value, datetime.date):
                    col_type = 'date'
                elif isinstance(value, str):
                    col_type = 'string'
                else:
                    col_type = 'number'
                column_types.append(col_type)
            js = []
            for col_type, label in zip(column_types, self.columns):
                js.append('data.addColumn("%s", "%s");' % (col_type, label))
            return '\n'.join(js)
        return ''

    @memoize
    def _getOptions(self):
        """
        Returns a javascript object containing the options for the visualization.
        """
        js_options = []
        for option, value in self.options.items():
            js_options.append('%s: %s' % (option, getJSValue(value)))
        # Set the width of the visualization to the container width if it
        # if not already set.
        if not 'width' in self.options.keys():
            js_options.append('width: container_width')
        if js_options:
            return '{%s}' % (', '.join(js_options))
        return 'null'